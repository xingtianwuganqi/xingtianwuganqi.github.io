<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Objective-C on Ethan编程小站</title>
    <link>https://xingtianwuganqi.github.io/tags/objective-c/</link>
    <description>Recent content in Objective-C on Ethan编程小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Mar 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xingtianwuganqi.github.io/tags/objective-c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创建私有cocoaPods库及遇到的问题</title>
      <link>https://xingtianwuganqi.github.io/posts/%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89cocoapods%E5%BA%93%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://xingtianwuganqi.github.io/posts/%E5%88%9B%E5%BB%BA%E7%A7%81%E6%9C%89cocoapods%E5%BA%93%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>1 .创建远端（github/gitlab）仓库 例如：创建-&amp;gt;projectMain作为项目主功能仓库，创建-&amp;gt;project_login为后期引用的（登录）组件化工程。创建-&amp;gt;project_SDK为后期引用的（基础组件SDK）组件化工程。创建-&amp;gt;project_Repo为版本管理仓库。。等等&#xA;2.创建本地仓库 例如：新建桌面文件A文件（如有多级仓库可在A文件下创建子文件a文件、b文件、c文件等）&#xA;3.将远端URL仓库克隆至本地: #关键代码 git clone http://xxxx.git tips cd 至A文件执行克隆，如：git clone http://project_login.git 4. 创建podspec文件（描述pod库版本文件）: pod spec create 工程名称 如：进入步骤3中克隆的项目文件，在隐藏文件.git同级执行：pod spec create project_login&#xA;tips pod spec create project_login 5.配置spec（描述pod库版本文件）:直接XCode打开或者文本编译器打开 Pod::Spec.new do |spec| spec.name = &amp;#34;project_login&amp;#34; spec.version = &amp;#34;1.0.2&amp;#34; spec.summary = &amp;#34;project_login.&amp;#34; spec.description = &amp;lt;&amp;lt;-DESC project_login DESC spec.homepage = &amp;#34;http://192.168.65.252/jingjun/project_login.git&amp;#34; spec.license = { :type =&amp;gt; &amp;#34;MIT&amp;#34;, :file =&amp;gt; &amp;#34;LICENSE&amp;#34; } spec.swift_version = &amp;#39;4.0&amp;#39; spec.author = { &amp;#34;jingjun&amp;#34; =&amp;gt; &amp;#34;254032134@qq.com&amp;#34; } spec.</description>
    </item>
    <item>
      <title>Swift 简单的圆形进度条</title>
      <link>https://xingtianwuganqi.github.io/posts/swift-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</link>
      <pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate>
      <guid>https://xingtianwuganqi.github.io/posts/swift-%E7%AE%80%E5%8D%95%E7%9A%84%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/</guid>
      <description>下载时的圆形进度条 示例图： 代码如下： import UIKit func degreesToRadians(x:CGFloat) -&amp;gt; CGFloat{ return CGFloat(double_t.pi) * (x) / 180.0 } let ProgressDownload = 1 class NewsYBDownLoadVIew: UIView { var _trackLayer:CAShapeLayer? var _progressLayer:CAShapeLayer? private var progress:CGFloat = 0 //中间叉的图片 private let cancelImg : UIImageView = { let image = UIImageView() image.image = UIImage(named: &amp;#34;news_yb_cancel_down&amp;#34;) return image }() // 在合适的位置设计setprogress 属性即可 var setprogress:CGFloat = 0{ willSet { changeProgress(progress: newValue) } } override func draw(_ rect: CGRect) { // Drawing code //创建一个track shape layer _trackLayer = CAShapeLayer() _trackLayer?</description>
    </item>
    <item>
      <title>iOS 获取String中的url并用其他颜色显示</title>
      <link>https://xingtianwuganqi.github.io/posts/ios-%E8%8E%B7%E5%8F%96string%E4%B8%AD%E7%9A%84url%E5%B9%B6%E7%94%A8%E5%85%B6%E4%BB%96%E9%A2%9C%E8%89%B2%E6%98%BE%E7%A4%BA/</link>
      <pubDate>Thu, 09 Aug 2018 00:00:00 +0000</pubDate>
      <guid>https://xingtianwuganqi.github.io/posts/ios-%E8%8E%B7%E5%8F%96string%E4%B8%AD%E7%9A%84url%E5%B9%B6%E7%94%A8%E5%85%B6%E4%BB%96%E9%A2%9C%E8%89%B2%E6%98%BE%E7%A4%BA/</guid>
      <description>这里用textView显示带url的String fileprivate let detailText&#x9;= UITextView().then { (textview)in textview.font = UIFont.systemFont(ofSize:14) textview.textColor = UIColor(hexString:&amp;#34;#333333&amp;#34;) textview.isEditable =false; //必须禁止输入，否则点击将弹出输入键盘 textview.isScrollEnabled =false; } 用这个方法获取url,获取url的数组 private func getUrls(str:String) -&amp;gt; [String] { varurls = [String]() // 创建一个正则表达式对象 do{ let dataDetector = try NSDataDetector(types:NSTextCheckingTypes(NSTextCheckingResult.CheckingType.link.rawValue)) // 匹配字符串，返回结果集 let res = dataDetector.matches(in: str,options:NSRegularExpression.MatchingOptions(rawValue:0),range:NSMakeRange(0, str.count)) // 取出结果 for checkingRes in res { urls.append((str as NSString).substring(with: checkingRes.range)) } } catch{ print(error) } returnurls } 获取url数组 let arr =self.getUrls(str: state.detail) let attrubuteStr = NSMutableAttributedString(string: state.</description>
    </item>
  </channel>
</rss>
