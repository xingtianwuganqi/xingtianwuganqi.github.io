<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS 获取String中的url并用其他颜色显示]]></title>
    <url>%2F2018%2F08%2F09%2FiOS%20%E8%8E%B7%E5%8F%96String%E4%B8%AD%E7%9A%84url%E5%B9%B6%E7%94%A8%E5%85%B6%E4%BB%96%E9%A2%9C%E8%89%B2%E6%98%BE%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[iOS 获取String中的url并用其他颜色显示这里用textView显示带url的String1234567891011fileprivate let detailText = UITextView().then &#123; (textview)in textview.font = UIFont.systemFont(ofSize:14) textview.textColor = UIColor(hexString:&quot;#333333&quot;) textview.isEditable =false; //必须禁止输入，否则点击将弹出输入键盘 textview.isScrollEnabled =false;&#125; 用这个方法获取url,获取url的数组123456789101112131415161718192021222324private func getUrls(str:String) -&gt; [String] &#123; varurls = [String]() // 创建一个正则表达式对象 do&#123; let dataDetector = try NSDataDetector(types:NSTextCheckingTypes(NSTextCheckingResult.CheckingType.link.rawValue)) // 匹配字符串，返回结果集 let res = dataDetector.matches(in: str,options:NSRegularExpression.MatchingOptions(rawValue:0),range:NSMakeRange(0, str.count)) // 取出结果 for checkingRes in res &#123; urls.append((str as NSString).substring(with: checkingRes.range)) &#125; &#125; catch&#123; print(error) &#125; returnurls &#125; 获取url数组12345678910111213141516171819202122232425262728293031let arr =self.getUrls(str: state.detail)let attrubuteStr = NSMutableAttributedString(string: state.detail)if arr.count &gt;0&#123; for i in arr &#123; let nsString = NSString(string: state.detail) let bigRange = nsString.range(of: state.detail) let range = nsString.range(of: i) attrubuteStr.addAttribute(NSAttributedStringKey.font, value: UIFont.systemFont(ofSize:14), range: bigRange) attrubuteStr.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor(hexString:&quot;#286efa&quot;)!, range: range) attrubuteStr.addAttribute(NSAttributedStringKey.link, value: i, range: range) &#125;&#125;else&#123; let nsString = NSString(string: state.detail) let bigRange = nsString.range(of: state.detail) attrubuteStr.addAttribute(NSAttributedStringKey.font, value: UIFont.systemFont(ofSize:14), range: bigRange)&#125;self.detailText.attributedText = attrubuteStr 最后实现textView的代理方法，点击url触发事件1234func textView(_textView:UITextView, shouldInteractWith URL:URL, in characterRange:NSRange, interaction:UITextItemInteraction) -&gt;Bool&#123; self.navigatorService?.navigatorSubject.onNext(NavigatorItem.WebPage(&quot;&quot;,&quot;\(URL)&quot;)) return false&#125;]]></content>
      <categories>
        <category>iOS笔记</category>
      </categories>
      <tags>
        <tag>Swift</tag>
        <tag>Objective-C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac 蓝牙键盘、鼠标断开连接之后无法重新连接的解决办法]]></title>
    <url>%2F2018%2F08%2F08%2Fmac%20%E8%93%9D%E7%89%99%E9%94%AE%E7%9B%98%E3%80%81%E9%BC%A0%E6%A0%87%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5%E4%B9%8B%E5%90%8E%E6%97%A0%E6%B3%95%E9%87%8D%E6%96%B0%E8%BF%9E%E6%8E%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%2F</url>
    <content type="text"><![CDATA[mac 蓝牙键盘、鼠标断开连接之后无法重新连接的解决办法网上找的方法，记录一下find ~/Library -name com.apple.Bluetooth.*.plist -exec rm{}\;sudo rm /Library/Preferences/com.apple.Bluetooth.plist 重启之后重新配置一下蓝牙设备。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
</search>
